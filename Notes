What is Python?
Python was born from a desire to have a better way to do system administration.
Because of it's flexibility and extensibility, it expanded to cover a wide range 
of general purpose programming needs.

Let's break down a basic definition of Python by three of its core characteristics. 
Python is an interpreted, interactive, and object oriented programming language. 

Python is interpreted, when Python runs or executes it uses an interpreter to transform 
the code into statements line by line.

The interpreter decides if the line that it is executing is valid Python code. 
To be valid Python code the text needs to have the proper syntax and indentation.
If the interpreter encounters text that it doesn't recognize as accurate it errors 
and the execution stops or the file quits running. Think of the interpreter as a 
tool used by your computer to understand the instructions that you were giving it.

Python is interactive. Python provides an interactive shell or execution environment 
to execute Python code. This makes Python excellent for learning. The shell also uses 
the interpreter but in a different execution environment. Python is an Object Oriented 
programming language. There are different types of programming languages. To name a 
few, there are procedural, functional, and object oriented. Object oriented programming
creates objects that perform actions, have properties, and encourage code reusability 
as well as other features.

What are Built-in Functions?
In this section, we're going to discuss Built-In Python Functions. 
In the previous chapter, you've already seen me use some of the built-in Python
functions.
For example: int(), print(), type(), str(), and bool().

I do not define these functions, they already existed in the environment.
Built-in functions are installed when you download Python, and when the file executes, 
the interpreter is able to find the files for these functions and run them properly. 
Built-in in functions are global, so you can use them anywhere. 
One thing you want to try to avoid when creating functions is using the same 
names as the built-in functions.

There are usually many ways to define a function.
For example: instead of overriding type, 
we could try to create a function called category. 
Built-in functions are similar to String methods. 
There are more than you can probably remember, but if you have a good place 
to look for them, you can reference and explore them when needed.


Whereto look for the Built-in Functions?
We can see the description is short. This function returns a string version 
of an object. The documentation does a good job of linking to other descriptions. 
If we examine string more closely, we can find a longer definition on what the 
string function does. In the documentation return means the value that is 
returned once you execute the function. In previous lectures, I've been using 
this interchangeably with the word result. It is the result of the function. 
This is sometimes called the return value. Let's go back to the Built-In Functions page.

It probably wouldn't be very useful to memorize every single one of these functions.
However, when you navigate here, you can click on one, and view how to use it. 
Let's take a look at one of the other functions and break down the definition of 
it further.

Let's try abs. Return the absolute value of a number.
The argument, may be an integer or a floating point number.
If the argument is a complex number, its magnitude is returned. 
Here in the title you can see that you provide the function abs with (x). 
(X) is represented by a number. You know this because in the description 
it reads the argument may be an integer or a floating point number. 
Using the documentation, you can find out what value a function takes 
and what value you can expect in return. I would recommend bookmarking a 
documentation page because it's helpful to quickly navigate to and read more 
about Python functions. In the next video let's look over Common Built-In Functions.
